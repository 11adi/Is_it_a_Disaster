from transformers import TrainingArguments

training_args = TrainingArguments(
    output_dir=output_dir,
    evaluation_strategy=evaluation_strategy,
    save_total_limit=save_total_limit,
    save_strategy=save_strategy,
    num_train_epochs=num_train_epochs,
    per_device_train_batch_size=per_device_train_batch_size,
    per_device_eval_batch_size=per_device_eval_batch_size,
    learning_rate=learning_rate,
    warmup_steps=warmup_steps,
    weight_decay=weight_decay,
    metric_for_best_model=metric_for_best_model,
    report_to=report_to,
    load_best_model_at_end=load_best_model_at_end,
)

model = AutoModelForSequenceClassification.from_pretrained(
    model_name,
    num_labels = num_labels,
    ignore_mismatched_sizes = True
)

glue_metric = evaluate.load("glue", "mnli")

def compute_metrics(eval_pred):
    predictions, labels = eval_pred

    predictions = np.argmax(predictions, axis = 1)

    return glue_metric.compute(predictions = predictions, references = labels)
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=dev_dataset,
    compute_metrics=compute_metrics,
    callbacks=[EarlyStoppingCallback(early_stopping_patience=5)]
)

trainer.train()
